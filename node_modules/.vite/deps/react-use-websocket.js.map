{
  "version": 3,
  "sources": ["../../react-use-websocket/src/lib/constants.ts", "../../react-use-websocket/src/lib/globals.ts", "../../react-use-websocket/src/lib/socket-io.ts", "../../react-use-websocket/src/lib/manage-subscribers.ts", "../../react-use-websocket/src/lib/util.ts", "../../react-use-websocket/src/lib/attach-listener.ts", "../../react-use-websocket/src/lib/attach-shared-listeners.ts", "../../react-use-websocket/src/lib/create-or-join.ts", "../../react-use-websocket/src/lib/get-url.ts", "../../react-use-websocket/src/lib/proxy.ts", "../../react-use-websocket/src/lib/use-websocket.ts", "../../react-use-websocket/src/lib/use-socket-io.ts", "../../react-use-websocket/src/lib/use-event-source.ts", "../../react-use-websocket/src/index.ts"],
  "sourcesContent": ["import { EventSourceEventHandlers, EventSourceOptions } from \"./types\";\r\n\r\nconst MILLISECONDS = 1;\r\nconst SECONDS = 1000 * MILLISECONDS;\r\n\r\nexport const DEFAULT_OPTIONS = {};\r\nexport const EMPTY_EVENT_HANDLERS: EventSourceEventHandlers = {};\r\nexport const DEFAULT_EVENT_SOURCE_OPTIONS: EventSourceOptions = {\r\n  withCredentials: false,\r\n  events: EMPTY_EVENT_HANDLERS,\r\n};\r\nexport const SOCKET_IO_PING_INTERVAL = 25 * SECONDS;\r\nexport const SOCKET_IO_PATH = '/socket.io/?EIO=3&transport=websocket';\r\nexport const SOCKET_IO_PING_CODE = '2';\r\nexport const DEFAULT_RECONNECT_LIMIT = 20;\r\nexport const DEFAULT_RECONNECT_INTERVAL_MS = 5000;\r\nexport const UNPARSABLE_JSON_OBJECT = {};\r\n\r\nexport enum ReadyState {\r\n  UNINSTANTIATED = -1,\r\n  CONNECTING = 0,\r\n  OPEN = 1,\r\n  CLOSING = 2,\r\n  CLOSED = 3,\r\n}\r\n\r\nconst eventSourceSupported = () => {\r\n  try {\r\n    return 'EventSource' in globalThis;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport const isReactNative = typeof navigator !== 'undefined' && navigator.product === 'ReactNative';\r\nexport const isEventSourceSupported = !isReactNative && eventSourceSupported();\r\n", "import { WebSocketLike } from \"./types\";\r\n\r\nexport interface SharedWebSockets {\r\n  [url: string]: WebSocketLike;\r\n}\r\n\r\nexport const sharedWebSockets: SharedWebSockets = {};\r\n\r\nexport const resetWebSockets = (url?: string): void => {\r\n  if (url && sharedWebSockets.hasOwnProperty(url)) {\r\n    delete sharedWebSockets[url];\r\n  } else {\r\n    for (let url in sharedWebSockets){\r\n      if (sharedWebSockets.hasOwnProperty(url)){\r\n        delete sharedWebSockets[url];\r\n      }\r\n    }\r\n  }\r\n}\r\n", "import { SOCKET_IO_PING_INTERVAL, SOCKET_IO_PATH, SOCKET_IO_PING_CODE } from './constants';\r\nimport { QueryParams, SendMessage } from './types';\r\n\r\nexport const parseSocketIOUrl = (url: string) => {\r\n  if (url) {\r\n    const isSecure = /^https|wss/.test(url);\r\n    const strippedProtocol = url.replace(/^(https?|wss?)(:\\/\\/)?/, '');\r\n    const removedFinalBackSlack = strippedProtocol.replace(/\\/$/, '');\r\n    const protocol = isSecure ? 'wss' : 'ws';\r\n\r\n    return `${protocol}://${removedFinalBackSlack}${SOCKET_IO_PATH}`;\r\n  } else if (url === '') {\r\n    const isSecure = /^https/.test(window.location.protocol);\r\n    const protocol = isSecure ? 'wss' : 'ws';\r\n    const port = window.location.port ? `:${window.location.port}` : '';\r\n\r\n    return `${protocol}://${window.location.hostname}${port}${SOCKET_IO_PATH}`;\r\n  }\r\n\r\n  return url;\r\n};\r\n\r\nexport const appendQueryParams = (url: string, params: QueryParams = {}): string => {\r\n  const hasParamsRegex = /\\?([\\w]+=[\\w]+)/;\r\n  const alreadyHasParams = hasParamsRegex.test(url);\r\n\r\n  const stringified = `${Object.entries(params).reduce((next, [key, value]) => {\r\n    return next + `${key}=${value}&`;\r\n  }, '').slice(0, -1)}`;\r\n\r\n  return `${url}${alreadyHasParams ? '&' : '?'}${stringified}`;\r\n};\r\n\r\nexport const setUpSocketIOPing = (sendMessage: SendMessage, interval = SOCKET_IO_PING_INTERVAL): any => {\r\n  const ping = () => sendMessage(SOCKET_IO_PING_CODE);\r\n\r\n  return setInterval(ping, interval);\r\n};\r\n", "import { Subscriber } from './types';\r\n\r\nexport type Subscribers = {\r\n    [url: string]: Set<Subscriber>,\r\n}\r\n  \r\nconst subscribers: Subscribers = {};\r\nconst EMPTY_LIST: Subscriber[] = [];\r\n\r\nexport const getSubscribers = (url: string): Subscriber[] => {\r\n    if (hasSubscribers(url)) {\r\n        return Array.from(subscribers[url]);\r\n    }\r\n    return EMPTY_LIST;\r\n};\r\n\r\nexport const hasSubscribers = (url: string): boolean => {\r\n    return subscribers[url]?.size > 0;\r\n};\r\n\r\nexport const addSubscriber = (url: string, subscriber: Subscriber): void => {\r\n    subscribers[url] = subscribers[url] || new Set<Subscriber>();\r\n    subscribers[url].add(subscriber);\r\n};\r\n\r\nexport const removeSubscriber = (url: string, subscriber: Subscriber): void => {\r\n    subscribers[url].delete(subscriber);\r\n};\r\n\r\nexport const resetSubscribers = (url?: string): void => {\r\n    if (url && subscribers.hasOwnProperty(url)) {\r\n        delete subscribers[url];\r\n    } else {\r\n        for (let url in subscribers){\r\n            if (subscribers.hasOwnProperty(url)){\r\n                delete subscribers[url];\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import { WebSocketLike } from './types';\r\nimport { resetWebSockets } from './globals';\r\nimport { resetSubscribers } from './manage-subscribers';\r\n\r\nexport function assertIsWebSocket (\r\n    webSocketInstance: WebSocketLike,\r\n): asserts webSocketInstance is WebSocket {\r\n    if (webSocketInstance instanceof WebSocket === false) throw new Error('');\r\n};\r\n\r\n\r\nexport function resetGlobalState (url?: string): void {\r\n    resetSubscribers(url);\r\n    resetWebSockets(url);\r\n};\r\n", "import { MutableRefObject } from 'react';\r\nimport { setUpSocketIOPing } from './socket-io';\r\nimport {\r\n  DEFAULT_RECONNECT_LIMIT,\r\n  DEFAULT_RECONNECT_INTERVAL_MS,\r\n  ReadyState,\r\n  isEventSourceSupported,\r\n} from './constants';\r\nimport { Options, SendMessage, WebSocketLike } from './types';\r\nimport { assertIsWebSocket } from './util';\r\n\r\nexport interface Setters {\r\n  setLastMessage: (message: WebSocketEventMap['message']) => void;\r\n  setReadyState: (readyState: ReadyState) => void;\r\n}\r\n\r\nconst bindMessageHandler = (\r\n  webSocketInstance: WebSocketLike,\r\n  optionsRef: MutableRefObject<Options>,\r\n  setLastMessage: Setters['setLastMessage'],\r\n) => {\r\n  webSocketInstance.onmessage = (message: WebSocketEventMap['message']) => {\r\n    optionsRef.current.onMessage && optionsRef.current.onMessage(message);\r\n    if (typeof optionsRef.current.filter === 'function' && optionsRef.current.filter(message) !== true) {\r\n      return;\r\n    }\r\n    setLastMessage(message);\r\n  };\r\n};\r\n\r\nconst bindOpenHandler = (\r\n  webSocketInstance: WebSocketLike,\r\n  optionsRef: MutableRefObject<Options>,\r\n  setReadyState: Setters['setReadyState'],\r\n  reconnectCount: MutableRefObject<number>,\r\n) => {\r\n  webSocketInstance.onopen = (event: WebSocketEventMap['open']) => {\r\n    optionsRef.current.onOpen && optionsRef.current.onOpen(event);\r\n    reconnectCount.current = 0;\r\n    setReadyState(ReadyState.OPEN);\r\n  };\r\n};\r\n\r\nconst bindCloseHandler = (\r\n  webSocketInstance: WebSocketLike,\r\n  optionsRef: MutableRefObject<Options>,\r\n  setReadyState: Setters['setReadyState'],\r\n  reconnect: () => void,\r\n  reconnectCount: MutableRefObject<number>,\r\n) => {\r\n  if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\r\n    return () => {};\r\n  }\r\n  assertIsWebSocket(webSocketInstance);\r\n  let reconnectTimeout: number;\r\n\r\n  webSocketInstance.onclose = (event: WebSocketEventMap['close']) => {\r\n    optionsRef.current.onClose && optionsRef.current.onClose(event);\r\n    setReadyState(ReadyState.CLOSED);\r\n    if (optionsRef.current.shouldReconnect && optionsRef.current.shouldReconnect(event)) {\r\n      const reconnectAttempts = optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT;\r\n      if (reconnectCount.current < reconnectAttempts) {\r\n        reconnectTimeout = window.setTimeout(() => {\r\n          reconnectCount.current++;\r\n          reconnect();\r\n        }, optionsRef.current.reconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\r\n      } else {\r\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(reconnectAttempts);\r\n        console.warn(`Max reconnect attempts of ${reconnectAttempts} exceeded`);\r\n      }\r\n    }\r\n  };\r\n\r\n  return () => reconnectTimeout && window.clearTimeout(reconnectTimeout);\r\n};\r\n\r\nconst bindErrorHandler = (\r\n  webSocketInstance: WebSocketLike,\r\n  optionsRef: MutableRefObject<Options>,\r\n  setReadyState: Setters['setReadyState'],\r\n  reconnect: () => void,\r\n  reconnectCount: MutableRefObject<number>,\r\n) => {\r\n  let reconnectTimeout: number;\r\n\r\n  webSocketInstance.onerror = (error: WebSocketEventMap['error']) => {\r\n    optionsRef.current.onError && optionsRef.current.onError(error);\r\n    if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\r\n      optionsRef.current.onClose && optionsRef.current.onClose({\r\n        ...error,\r\n        code: 1006,\r\n        reason: `An error occurred with the EventSource: ${error}`,\r\n        wasClean: false,\r\n      });\r\n\r\n      setReadyState(ReadyState.CLOSED);\r\n      webSocketInstance.close();\r\n    }\r\n    \r\n    if (optionsRef.current.retryOnError) {\r\n      if (reconnectCount.current < (optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT)) {\r\n        reconnectTimeout = window.setTimeout(() => {\r\n          reconnectCount.current++;\r\n          reconnect();\r\n        }, optionsRef.current.reconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\r\n      } else {\r\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(optionsRef.current.reconnectAttempts as number);\r\n        console.warn(`Max reconnect attempts of ${optionsRef.current.reconnectAttempts} exceeded`);\r\n      }\r\n    }\r\n  };\r\n\r\n  return () => reconnectTimeout && window.clearTimeout(reconnectTimeout);\r\n};\r\n\r\nexport const attachListeners = (\r\n    webSocketInstance: WebSocketLike,\r\n    setters: Setters,\r\n    optionsRef: MutableRefObject<Options>,\r\n    reconnect: () => void,\r\n    reconnectCount: MutableRefObject<number>,\r\n    sendMessage: SendMessage,\r\n  ): (() => void) => {\r\n  const { setLastMessage, setReadyState } = setters;\r\n\r\n  let interval: number;\r\n  let cancelReconnectOnClose: () => void;\r\n  let cancelReconnectOnError: () => void;\r\n\r\n  if (optionsRef.current.fromSocketIO) {\r\n    interval = setUpSocketIOPing(sendMessage);\r\n  }\r\n\r\n  bindMessageHandler(\r\n    webSocketInstance,\r\n    optionsRef,\r\n    setLastMessage,\r\n  );\r\n\r\n  bindOpenHandler(\r\n    webSocketInstance,\r\n    optionsRef,\r\n    setReadyState,\r\n    reconnectCount,\r\n  );\r\n\r\n  cancelReconnectOnClose = bindCloseHandler(\r\n    webSocketInstance,\r\n    optionsRef,\r\n    setReadyState,\r\n    reconnect,\r\n    reconnectCount,\r\n  );\r\n\r\n  cancelReconnectOnError = bindErrorHandler(\r\n    webSocketInstance,\r\n    optionsRef,\r\n    setReadyState,\r\n    reconnect,\r\n    reconnectCount,\r\n  );\r\n\r\n  return () => {\r\n    setReadyState(ReadyState.CLOSING);\r\n    cancelReconnectOnClose();\r\n    cancelReconnectOnError();\r\n    webSocketInstance.close();\r\n    if (interval) clearInterval(interval);\r\n  };\r\n};\r\n", "import { sharedWebSockets } from './globals';\r\nimport { DEFAULT_RECONNECT_LIMIT, DEFAULT_RECONNECT_INTERVAL_MS, ReadyState, isEventSourceSupported } from './constants';\r\nimport { getSubscribers } from './manage-subscribers';\r\nimport { MutableRefObject } from 'react';\r\nimport { Options, SendMessage, WebSocketLike } from './types';\r\nimport { setUpSocketIOPing } from './socket-io';\r\n\r\nconst bindMessageHandler = (\r\n  webSocketInstance: WebSocketLike,\r\n  url: string,\r\n) => {\r\n  webSocketInstance.onmessage = (message: WebSocketEventMap['message']) => {\r\n    getSubscribers(url).forEach(subscriber => {\r\n      if (subscriber.optionsRef.current.onMessage) {\r\n        subscriber.optionsRef.current.onMessage(message);\r\n      }\r\n\r\n      if (\r\n        typeof subscriber.optionsRef.current.filter === 'function' &&\r\n        subscriber.optionsRef.current.filter(message) !== true\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      subscriber.setLastMessage(message);\r\n    });\r\n  };\r\n};\r\n\r\nconst bindOpenHandler = (\r\n  webSocketInstance: WebSocketLike,\r\n  url: string,\r\n) => {\r\n  webSocketInstance.onopen = (event: WebSocketEventMap['open']) => {\r\n    getSubscribers(url).forEach(subscriber => {\r\n      subscriber.reconnectCount.current = 0;\r\n      if (subscriber.optionsRef.current.onOpen) {\r\n        subscriber.optionsRef.current.onOpen(event);\r\n      }\r\n\r\n      subscriber.setReadyState(ReadyState.OPEN);\r\n    });\r\n  };\r\n};\r\n\r\nconst bindCloseHandler = (\r\n  webSocketInstance: WebSocketLike,\r\n  url: string,\r\n) => {\r\n  if (webSocketInstance instanceof WebSocket) {\r\n    webSocketInstance.onclose = (event: WebSocketEventMap['close']) => {\r\n      getSubscribers(url).forEach(subscriber => {\r\n        if (subscriber.optionsRef.current.onClose) {\r\n          subscriber.optionsRef.current.onClose(event);\r\n        }\r\n  \r\n        subscriber.setReadyState(ReadyState.CLOSED);\r\n      });\r\n      \r\n      delete sharedWebSockets[url];\r\n  \r\n      getSubscribers(url).forEach(subscriber => {\r\n        if (\r\n          subscriber.optionsRef.current.shouldReconnect &&\r\n          subscriber.optionsRef.current.shouldReconnect(event)\r\n        ) {\r\n          const reconnectAttempts = subscriber.optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT;\r\n          if (subscriber.reconnectCount.current < reconnectAttempts) {\r\n            setTimeout(() => {\r\n              subscriber.reconnectCount.current++;\r\n              subscriber.reconnect.current();\r\n            }, subscriber.optionsRef.current.reconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\r\n          } else {\r\n            subscriber.optionsRef.current.onReconnectStop && subscriber.optionsRef.current.onReconnectStop(subscriber.optionsRef.current.reconnectAttempts as number);\r\n            console.warn(`Max reconnect attempts of ${reconnectAttempts} exceeded`);\r\n          }\r\n        }\r\n      });\r\n    };\r\n  }\r\n};\r\n\r\nconst bindErrorHandler = (\r\n  webSocketInstance: WebSocketLike,\r\n  url: string,\r\n) => {\r\n  webSocketInstance.onerror = (error: WebSocketEventMap['error']) => {\r\n    getSubscribers(url).forEach(subscriber => {\r\n      if (subscriber.optionsRef.current.onError) {\r\n        subscriber.optionsRef.current.onError(error);\r\n      }\r\n      if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\r\n        subscriber.optionsRef.current.onClose && subscriber.optionsRef.current.onClose({\r\n          ...error,\r\n          code: 1006,\r\n          reason: `An error occurred with the EventSource: ${error}`,\r\n          wasClean: false,\r\n        });\r\n  \r\n        subscriber.setReadyState(ReadyState.CLOSED);\r\n      }\r\n    });\r\n    if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\r\n      webSocketInstance.close();\r\n    }\r\n  };\r\n};\r\n\r\nexport const attachSharedListeners = (\r\n  webSocketInstance: WebSocketLike,\r\n  url: string,\r\n  optionsRef: MutableRefObject<Options>,\r\n  sendMessage: SendMessage,\r\n) => {\r\n  let interval: number;\r\n\r\n  if (optionsRef.current.fromSocketIO) {\r\n    interval = setUpSocketIOPing(sendMessage);\r\n  }\r\n\r\n  bindMessageHandler(webSocketInstance, url);\r\n  bindCloseHandler(webSocketInstance, url);\r\n  bindOpenHandler(webSocketInstance, url);\r\n  bindErrorHandler(webSocketInstance, url);\r\n\r\n  return () => {\r\n    if (interval) clearInterval(interval);\r\n  };\r\n};\r\n", "import { MutableRefObject } from 'react';\r\nimport { sharedWebSockets } from './globals';\r\nimport { Options, SendMessage, Subscriber, WebSocketLike } from './types';\r\nimport { isEventSourceSupported, ReadyState, isReactNative } from './constants';\r\nimport { attachListeners } from './attach-listener';\r\nimport { attachSharedListeners } from './attach-shared-listeners';\r\nimport { addSubscriber, removeSubscriber, hasSubscribers } from './manage-subscribers';\r\n\r\n//TODO ensure that all onClose callbacks are called\r\n\r\nconst cleanSubscribers = (\r\n  url: string,\r\n  subscriber: Subscriber,\r\n  optionsRef: MutableRefObject<Options>,\r\n  setReadyState: (readyState: ReadyState) => void,\r\n  clearSocketIoPingInterval: (() => void) | null,\r\n) => {\r\n  return () => {\r\n    removeSubscriber(url, subscriber);\r\n    if (!hasSubscribers(url)) {\r\n      try {\r\n        const socketLike = sharedWebSockets[url];\r\n        if (socketLike instanceof WebSocket) {\r\n          socketLike.onclose = (event: WebSocketEventMap['close']) => {\r\n            if (optionsRef.current.onClose) {\r\n              optionsRef.current.onClose(event);\r\n            }\r\n            setReadyState(ReadyState.CLOSED);\r\n          };\r\n        }\r\n        socketLike.close();\r\n      } catch (e) {\r\n\r\n      }\r\n      if (clearSocketIoPingInterval) clearSocketIoPingInterval();\r\n\r\n      delete sharedWebSockets[url];\r\n    }\r\n  }\r\n};\r\n\r\nexport const createOrJoinSocket = (\r\n  webSocketRef: MutableRefObject<WebSocketLike | null>,\r\n  url: string,\r\n  setReadyState: (readyState: ReadyState) => void,\r\n  optionsRef: MutableRefObject<Options>,\r\n  setLastMessage: (message: WebSocketEventMap['message']) => void,\r\n  startRef: MutableRefObject<() => void>,\r\n  reconnectCount: MutableRefObject<number>,\r\n  sendMessage: SendMessage,\r\n): (() => void) => {\r\n  if (!isEventSourceSupported && optionsRef.current.eventSourceOptions) {\r\n    if (isReactNative) {\r\n      throw new Error('EventSource is not supported in ReactNative');\r\n    } else {\r\n      throw new Error('EventSource is not supported');\r\n    }\r\n  }\r\n\r\n  if (optionsRef.current.share) {\r\n    let clearSocketIoPingInterval: ((() => void) | null) = null;\r\n    if (sharedWebSockets[url] === undefined) {\r\n      sharedWebSockets[url] = optionsRef.current.eventSourceOptions ?\r\n        new EventSource(url, optionsRef.current.eventSourceOptions) :\r\n        new WebSocket(url, optionsRef.current.protocols);\r\n      webSocketRef.current = sharedWebSockets[url];\r\n      setReadyState(ReadyState.CONNECTING);\r\n      clearSocketIoPingInterval = attachSharedListeners(\r\n        sharedWebSockets[url],\r\n        url,\r\n        optionsRef,\r\n        sendMessage,\r\n      );\r\n    } else {\r\n      webSocketRef.current = sharedWebSockets[url];\r\n      setReadyState(sharedWebSockets[url].readyState);\r\n    }\r\n\r\n    const subscriber: Subscriber = {\r\n      setLastMessage,\r\n      setReadyState,\r\n      optionsRef,\r\n      reconnectCount,\r\n      reconnect: startRef,\r\n    };\r\n  \r\n    addSubscriber(url, subscriber);\r\n\r\n    return cleanSubscribers(\r\n      url,\r\n      subscriber,\r\n      optionsRef,\r\n      setReadyState,\r\n      clearSocketIoPingInterval,\r\n    );\r\n  } else {\r\n    webSocketRef.current = optionsRef.current.eventSourceOptions ?\r\n      new EventSource(url, optionsRef.current.eventSourceOptions) :\r\n      new WebSocket(url, optionsRef.current.protocols);\r\n    setReadyState(ReadyState.CONNECTING);\r\n    if (!webSocketRef.current) {\r\n      throw new Error('WebSocket failed to be created');\r\n    }\r\n\r\n    return attachListeners(\r\n      webSocketRef.current,\r\n      {\r\n        setLastMessage,\r\n        setReadyState\r\n      },\r\n      optionsRef,\r\n      startRef.current,\r\n      reconnectCount,\r\n      sendMessage,\r\n    );\r\n  }\r\n};\r\n", "import { MutableRefObject } from 'react';\r\nimport { parseSocketIOUrl, appendQueryParams } from './socket-io';\r\nimport { Options } from './types';\r\n\r\nexport const getUrl = async (\r\n  url: string | (() => string | Promise<string>),\r\n  optionsRef: MutableRefObject<Options>,\r\n) => {\r\n  let convertedUrl: string;\r\n\r\n  if (typeof url === 'function') {\r\n    convertedUrl = await url();\r\n  } else {\r\n    convertedUrl = url;\r\n  }\r\n\r\n  const parsedUrl = optionsRef.current.fromSocketIO ?\r\n    parseSocketIOUrl(convertedUrl) :\r\n    convertedUrl;\r\n\r\n  const parsedWithQueryParams = optionsRef.current.queryParams ?\r\n    appendQueryParams(\r\n      parsedUrl,\r\n      optionsRef.current.queryParams\r\n    ) :\r\n    parsedUrl;\r\n\r\n  return parsedWithQueryParams;\r\n};\r\n", "import { MutableRefObject } from 'react';\r\n\r\ntype IfEquals<X, Y, A=X, B=never> =\r\n  (<T>() => T extends X ? 1 : 2) extends\r\n  (<T>() => T extends Y ? 1 : 2) ? A : B;\r\n\r\ntype WritableKeys<T> = {\r\n  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>\r\n}[keyof T];\r\n\r\nexport const websocketWrapper = (\r\n  webSocket: WebSocket,\r\n  start: MutableRefObject<() => void>,\r\n): WebSocket => {\r\n\r\n  return new Proxy<WebSocket>(webSocket, {\r\n    get: (obj, key: keyof WebSocket) => {\r\n      const val = obj[key];\r\n      if ((key as any) === 'reconnect') return start;\r\n      if (typeof val === 'function') {\r\n        console.error('Calling methods directly on the websocket is not supported at this moment. You must use the methods returned by useWebSocket.');\r\n        \r\n        //Prevent error thrown by invoking a non-function\r\n        return () => {};\r\n      } else {\r\n        return val;\r\n      }\r\n    },\r\n    set: (obj: WebSocket, key:WritableKeys<WebSocket>, val: any) => {\r\n      if (/^on/.test(key)) {\r\n        console.warn('The websocket\\'s event handlers should be defined through the options object passed into useWebSocket.')\r\n        return false;\r\n      } else {\r\n        obj[key] = val;\r\n        return true;\r\n      }\r\n    },\r\n  });\r\n};\r\n\r\nexport default websocketWrapper;\r\n", "import { useEffect, useRef, useState, useCallback, useMemo } from 'react';\r\nimport { DEFAULT_OPTIONS, isEventSourceSupported, ReadyState, UNPARSABLE_JSON_OBJECT } from './constants';\r\nimport { createOrJoinSocket } from './create-or-join';\r\nimport { getUrl } from './get-url';\r\nimport websocketWrapper from './proxy';\r\nimport {\r\n  Options,\r\n  ReadyStateState,\r\n  SendMessage,\r\n  SendJsonMessage,\r\n  WebSocketMessage,\r\n  WebSocketHook,\r\n  WebSocketLike,\r\n} from './types';\r\nimport { assertIsWebSocket } from './util';\r\n\r\nexport const useWebSocket = (\r\n  url: string | (() => string | Promise<string>) | null,\r\n  options: Options = DEFAULT_OPTIONS,\r\n  connect: boolean = true,\r\n): WebSocketHook => {\r\n  const [lastMessage, setLastMessage] = useState<WebSocketEventMap['message'] | null>(null);\r\n  const [readyState, setReadyState] = useState<ReadyStateState>({});\r\n  const lastJsonMessage = useMemo(() => {\r\n    if (lastMessage) {\r\n      try {\r\n        return JSON.parse(lastMessage.data);\r\n      } catch (e) {\r\n        return UNPARSABLE_JSON_OBJECT;\r\n      }\r\n    }\r\n    return null;\r\n  },[lastMessage]);\r\n  const convertedUrl = useRef<string | null>(null);\r\n  const webSocketRef = useRef<WebSocketLike | null>(null);\r\n  const startRef = useRef<() => void>(() => void 0);\r\n  const reconnectCount = useRef<number>(0);\r\n  const messageQueue = useRef<WebSocketMessage[]>([]);\r\n  const webSocketProxy = useRef<WebSocketLike | null>(null);\r\n  const optionsCache = useRef<Options>(options);\r\n  optionsCache.current = options;\r\n\r\n  const readyStateFromUrl: ReadyState =\r\n    convertedUrl.current && readyState[convertedUrl.current] !== undefined ?\r\n      readyState[convertedUrl.current] :\r\n      url !== null && connect === true ?\r\n        ReadyState.CONNECTING :\r\n        ReadyState.UNINSTANTIATED;\r\n\r\n  const stringifiedQueryParams = options.queryParams ? JSON.stringify(options.queryParams) : null;\r\n\r\n  const sendMessage: SendMessage = useCallback((message, keep = true) => {\r\n    if (isEventSourceSupported && webSocketRef.current instanceof EventSource) {\r\n      console.warn('Unable to send a message from an eventSource');\r\n      return;\r\n    }\r\n  \r\n    if (webSocketRef.current?.readyState === ReadyState.OPEN) {\r\n      assertIsWebSocket(webSocketRef.current);\r\n      webSocketRef.current.send(message);\r\n    } else if (keep) {\r\n      messageQueue.current.push(message);\r\n    }\r\n  }, []);\r\n\r\n  const sendJsonMessage: SendJsonMessage = useCallback((message, keep = true) => {\r\n    sendMessage(JSON.stringify(message), keep);\r\n  }, [sendMessage]);\r\n  \r\n  const getWebSocket = useCallback(() => {\r\n    if (optionsCache.current.share !== true || (isEventSourceSupported && webSocketRef.current instanceof EventSource)) {\r\n      return webSocketRef.current;\r\n    }\r\n\r\n    if (webSocketProxy.current === null && webSocketRef.current) {\r\n      assertIsWebSocket(webSocketRef.current);\r\n      webSocketProxy.current = websocketWrapper(webSocketRef.current, startRef);\r\n    }\r\n\r\n    return webSocketProxy.current;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (url !== null && connect === true) {\r\n      let removeListeners: () => void;\r\n      let expectClose = false;\r\n\r\n      const start = async () => {\r\n        convertedUrl.current = await getUrl(url, optionsCache);\r\n\r\n        const protectedSetLastMessage = (message: WebSocketEventMap['message']) => {\r\n          if (!expectClose) {\r\n            setLastMessage(message);\r\n          }\r\n        };\r\n  \r\n        const protectedSetReadyState = (state: ReadyState) => {\r\n          if (!expectClose) {\r\n            setReadyState(prev => ({\r\n              ...prev,\r\n              ...(convertedUrl.current && {[convertedUrl.current]: state}),\r\n            }));\r\n          }\r\n        };\r\n\r\n        removeListeners = createOrJoinSocket(\r\n          webSocketRef,\r\n          convertedUrl.current,\r\n          protectedSetReadyState,\r\n          optionsCache,\r\n          protectedSetLastMessage,\r\n          startRef,\r\n          reconnectCount,\r\n          sendMessage,\r\n        );\r\n      };\r\n\r\n      startRef.current = () => {\r\n        if (!expectClose) {\r\n          if (webSocketProxy.current) webSocketProxy.current = null;\r\n          removeListeners?.();\r\n          start();\r\n        }\r\n      };\r\n    \r\n      start();\r\n      return () => {\r\n        expectClose = true;\r\n        if (webSocketProxy.current) webSocketProxy.current = null;\r\n        removeListeners?.();\r\n        setLastMessage(null);\r\n      };\r\n    } else if (url === null || connect === false) {\r\n      reconnectCount.current = 0; // reset reconnection attempts\r\n      setReadyState(prev => ({\r\n        ...prev,\r\n        ...(convertedUrl.current && {[convertedUrl.current]: ReadyState.CLOSED}),\r\n      }));\r\n    }\r\n  }, [url, connect, stringifiedQueryParams, sendMessage]);\r\n\r\n  useEffect(() => {\r\n    if (readyStateFromUrl === ReadyState.OPEN) {\r\n      messageQueue.current.splice(0).forEach(message => {\r\n        sendMessage(message);\r\n      });\r\n    }\r\n  }, [readyStateFromUrl]);\r\n\r\n  return {\r\n    sendMessage,\r\n    sendJsonMessage,\r\n    lastMessage,\r\n    lastJsonMessage,\r\n    readyState: readyStateFromUrl,\r\n    getWebSocket,\r\n  };\r\n};\r\n", "import { useMemo } from 'react'\r\nimport { useWebSocket } from './use-websocket'\r\nimport { DEFAULT_OPTIONS } from './constants'\r\nimport { Options, WebSocketHook } from './types';\r\n\r\nexport interface SocketIOMessageData {\r\n  type: string,\r\n  payload: any,\r\n}\r\n\r\nconst emptyEvent: SocketIOMessageData = {\r\n  type: 'empty',\r\n  payload: null,\r\n}\r\n\r\nconst getSocketData = (event: WebSocketEventMap['message'] | null): SocketIOMessageData => {\r\n  if (!event || !event.data) {\r\n    return emptyEvent\r\n  }\r\n\r\n  const match = event.data.match(/\\[.*]/)\r\n\r\n  if (!match) {\r\n    return emptyEvent\r\n  }\r\n\r\n  const data = JSON.parse(match)\r\n\r\n  if (!Array.isArray(data) || !data[1]) {\r\n    return emptyEvent\r\n  }\r\n\r\n  return {\r\n    type: data[0],\r\n    payload: data[1],\r\n  }\r\n}\r\n\r\nexport const useSocketIO = (\r\n  url: string | (() => string | Promise<string>) | null,\r\n  options: Options = DEFAULT_OPTIONS,\r\n  connect: boolean = true,\r\n): WebSocketHook<SocketIOMessageData> => {\r\n  const optionsWithSocketIO = useMemo(() => ({\r\n    ...options,\r\n    fromSocketIO: true,\r\n  }), [])\r\n\r\n  const {\r\n    sendMessage,\r\n    sendJsonMessage,\r\n    lastMessage,\r\n    readyState,\r\n    getWebSocket,\r\n  } = useWebSocket(\r\n\r\n    url,\r\n    optionsWithSocketIO,\r\n    connect,\r\n  );\r\n\r\n  const socketIOLastMessage = useMemo(() =>\r\n    getSocketData(lastMessage), [lastMessage]);\r\n\r\n  return {\r\n    sendMessage,\r\n    sendJsonMessage,\r\n    lastMessage: socketIOLastMessage,\r\n    lastJsonMessage: socketIOLastMessage,\r\n    readyState,\r\n    getWebSocket,\r\n  };\r\n}\r\n", "import { useEffect, useRef } from 'react'\r\nimport { useWebSocket } from './use-websocket'\r\nimport { DEFAULT_EVENT_SOURCE_OPTIONS, EMPTY_EVENT_HANDLERS } from './constants'\r\nimport { EventSourceOptions, Options, EventSourceHook, EventSourceEventHandlers } from './types';\r\n\r\nexport const useEventSource = (\r\n  url: string | (() => string | Promise<string>) | null,\r\n  { withCredentials, events, ...options }: EventSourceOptions = DEFAULT_EVENT_SOURCE_OPTIONS,\r\n  connect: boolean = true,\r\n): EventSourceHook => {\r\n  const optionsWithEventSource: Options = {\r\n      ...options,\r\n      eventSourceOptions: {\r\n        withCredentials,\r\n      }\r\n  };\r\n  const eventsRef = useRef<EventSourceEventHandlers>(EMPTY_EVENT_HANDLERS);\r\n  if (events) {\r\n    eventsRef.current = events\r\n  }\r\n\r\n  const {\r\n    lastMessage,\r\n    readyState,\r\n    getWebSocket,\r\n  } = useWebSocket(\r\n    url,\r\n    optionsWithEventSource,\r\n    connect,\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (lastMessage?.type) {\r\n        Object.entries(eventsRef.current).forEach(([type, handler]) => {\r\n            if (type === lastMessage.type) {\r\n                handler(lastMessage);\r\n            }\r\n        });\r\n    }\r\n  }, [lastMessage]);\r\n\r\n  return {\r\n    lastEvent: lastMessage,\r\n    readyState,\r\n    getEventSource: getWebSocket,\r\n  };\r\n}\r\n", "export { useWebSocket as default } from './lib/use-websocket';\r\n\r\nexport { SendMessage, Options } from './lib/types';\r\n\r\nexport { useSocketIO } from './lib/use-socket-io';\r\n\r\nexport { ReadyState } from './lib/constants';\r\n\r\nexport { useEventSource } from './lib/use-event-source';\r\n\r\nexport { resetGlobalState } from './lib/util';\r\n"],
  "mappings": "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",
  "names": ["ReadyState", "_a", "_b", "_a"]
}
